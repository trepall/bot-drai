import os
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = "8092588180:AAGJR1QrIqLgWBmZNxHEqb9f-Ou3YqLts7U"
GROUP_CHAT_ID = "4866741254"
ADMIN_IDS = {7662948442, 6802842517, 913595126}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
users_db = {}
mammoths_db = {}
messages_db = {}
banned_users = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –¢—ã –≤ –±–∞–Ω–µ")
        return
        
    users_db[user_id] = {
        "username": update.effective_user.username or "",
        "step": "need_username"
    }
    
    if user_id not in messages_db:
        messages_db[user_id] = []
    
    messages_db[user_id].append({"text": "/start", "time": datetime.now()})
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∞—Ä–∫–∏.\n\n"
        "1. –°–∫–∏–Ω—å username –±–µ–∑ @\n" 
        "2. –ó–∞—Ç–µ–º —Ñ–∞–π–ª"
    )
    
    if user_id not in ADMIN_IDS:
        try:
            await context.bot.send_message(GROUP_CHAT_ID, "–ú–∞–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª username!")
        except:
            pass

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –¢—ã –≤ –±–∞–Ω–µ")
        return
        
    if user_id not in messages_db:
        messages_db[user_id] = []
    messages_db[user_id].append({"text": text, "time": datetime.now()})
    
    if user_id in users_db and users_db[user_id]["step"] == "need_username":
        if "@" in text:
            await update.message.reply_text("‚ùå –ë–µ–∑ @")
            return
            
        users_db[user_id]["username"] = text
        users_db[user_id]["step"] = "need_file"
        await update.message.reply_text("‚úÖ –Æ–∑–µ—Ä–Ω–µ–π–º –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –¢—ã –≤ –±–∞–Ω–µ")
        return
        
    if user_id in users_db and users_db[user_id]["step"] == "need_file":
        await update.message.reply_text("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç! –ü—Ä–æ–≤–µ—Ä—è–µ–º...")
        await asyncio.sleep(4)
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–µ—Ñ–∞—É–Ω–¥–∞ –Ω–µ—Ç.")
        users_db[user_id]["step"] = "done"

async def cherryteam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    keyboard = [
        [InlineKeyboardButton("–ü–†–ò–í–Ø–ó–ê–¢–¨ –ú–ê–ú–û–ù–¢–ê ü¶£", callback_data="bind_mammoth")],
        [InlineKeyboardButton("–ú–û–ò –ú–ê–ú–û–ù–¢–´", callback_data="my_mammoths")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–†–æ–¥–Ω–æ–π –º–∏–≥—Ä–∞–Ω—Ç–∏–∫! –î–æ–±—Ä–æ –≤ TDTTEAM!\n"
        "–¶–µ–ø–ª—è–π –º–∞–º–æ–Ω—Ç–∞ –ø–æ –∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä—É.",
        reply_markup=markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "bind_mammoth":
        await query.edit_message_text("–ö–∏–¥–∞–π username –∏–ª–∏ id –º–∞–º–æ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å /start)")
    elif data == "my_mammoths":
        await query.edit_message_text("–ü–æ–∫–∞ –º–∞–º–æ–Ω—Ç–æ–≤ –Ω–µ—Ç")

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ –∞–¥–º–∏–Ω")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå /ban USER_ID")
        return
        
    try:
        target_id = int(context.args[0])
        banned_users.add(target_id)
        await update.message.reply_text(f"‚úÖ –ó–∞–±–∞–Ω–∏–ª {target_id}")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")

def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("cherryteam", cherryteam)) 
        app.add_handler(CommandHandler("ban", ban))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        app.add_handler(MessageHandler(filters.ATTACHMENT, handle_file))
        app.add_handler(CallbackQueryHandler(button_handler))
        
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤!")
        print("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º...")
        
        app.run_polling()
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
