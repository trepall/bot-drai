import os
import asyncio
import traceback
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import WebAppInfo

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üì© –ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    kb.button(
        text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
        web_app=WebAppInfo(url="https://trepall.github.io/draineeer/")
    )
    kb.button(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
    kb.button(text="üì≤ –°–∫–∞—á–∞—Ç—å NiceGram", url="https://nicegram.app/")
    kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π username.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

    await message.answer(
        text=text,
        reply_markup=kb.as_markup()
    )

# üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@dp.callback_query(lambda c: c.data == "instruction")
async def show_instruction(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    kb.adjust(1)

    instruction_text = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Nicegram —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ Nicegram –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n"
        "3. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´Nicegram¬ª.\n"
        "4. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª¬ª.\n"
        "5. –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏¬ª\n"
        "6. –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π username.\n"
        "7. –í—Å—Ç–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ NiceGram, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏!"
    )

    await callback.message.edit_text(
        text=instruction_text,
        reply_markup=kb.as_markup()
    )
    await callback.answer()

# üîô –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
        web_app=WebAppInfo(url="https://trepall.github.io/draineeer/")
    )
    kb.button(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
    kb.button(text="üì≤ –°–∫–∞—á–∞—Ç—å NiceGram", url="https://nicegram.app/")
    kb.adjust(1)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π username.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

    await callback.message.edit_text(
        text=text,
        reply_markup=kb.as_markup()
    )
    await callback.answer()

# üåê –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
async def handle_root(request):
    return web.Response(text="Portals bot is alive!")

async def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"üåê Web server running on port {port}")

# ‚ôªÔ∏è –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    while True:
        try:
            print("‚úÖ Bot is running...")
            await dp.start_polling(bot)
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)
            traceback.print_exc()
            print("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# üïê Keep-alive (–ø–∏–Ω–≥—É–µ—Ç Render URL)
async def keep_alive():
    url = os.getenv("RENDER_EXTERNAL_URL")
    if not url:
        print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, keep-alive –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    print(f"üîÑ Keep-alive –≤–∫–ª—é—á–µ–Ω, –ø–∏–Ω–≥—É–µ—Ç {url}")
    while True:
        try:
            async with ClientSession() as session:
                async with session.get(url) as resp:
                    print(f"üåç Keep-alive ping: {resp.status}")
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ keep-alive:", e)
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async def main():
    await asyncio.gather(start_web_server(), run_bot(), keep_alive())

if __name__ == "__main__":
    asyncio.run(main())
